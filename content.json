{"meta":{"title":"坦尼斯——龙枪——Linux技术博客","subtitle":"FOR free FOR technolog","description":null,"author":"坦尼斯","url":"https://tannisi.github.io"},"pages":[{"title":"","date":"2015-08-16T06:58:08.000Z","updated":"2018-01-05T04:10:26.000Z","comments":true,"path":"about/index.html","permalink":"https://tannisi.github.io/about/index.html","excerpt":"Hiker An attractive, exquisite theme for Hexo. named “Hiker”, short for “HikerNews”. ☞ Live Preview | ✎ Hiker 中文版使用文档","text":"Hiker An attractive, exquisite theme for Hexo. named “Hiker”, short for “HikerNews”. ☞ Live Preview | ✎ Hiker 中文版使用文档 Installation Get it from GitHub 1$ git clone https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker Enable Modify theme setting in _config.yml to hiker. 1234# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: hiker Update 12$ cd themes/Hiker$ git pull ConfigurationTheme configuration example1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Header Menumenu: Home: / Archives: archives Categories: categories Tags: tags About: aboutrss: /atom.xmlsince: 2013# Set default keywords (Use a comma to separate)keywords: \"\"# Put your favicon.ico into `hexo-site/themes/hiker/source/` directory.avatar: css/images/mylogo.jpg# Homepage# eg. home_background_image: css/images/home-bg.jpghome_background_image: css/images/home-bg.jpghome_logo_image: enable: false border: false url: css/images/homelogo.jpg# AboutPage backgroundabout_big_image: css/images/pose.jpg# Contentexcerpt_link: Read Morefancybox: true# Sidebarsidebar: rightwidgets:- category- tag- tagcloud- archive- recent_posts# comment ShortName, you can choose only ONE to display.duoshuo_shortname: iTimeTravelerdisqus_shortname:# Code Highlight theme# Available value:# default | normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: default# Article theme color# Available value:# random | orange | blue | red | green | blacktheme_color: random# display widgets at the bottom of index pages (pagination == 2)index_widgets:# - category# - tagcloud# - archive# widget behaviorarchive_type: 'monthly'show_count: true# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/google_site_verification:baidu_site_verification:qihu_site_verification:# Miscellaneousgoogle_analytics:gauges_analytics:twitter:google_plus:fb_admins:fb_app_id: menu - Navigation menu rss - RSS link excerpt_link - “Read More” link at the bottom of excerpted articles. false to hide the link. fancybox - Enable Fancybox sidebar - Sidebar style. You can choose left, right, bottom or false. widgets - Widgets displaying in sidebar google_analytics - Google Analytics ID favicon - Favicon path twitter - Twiiter ID google_plus - Google+ ID FeaturesHomepage backgroundYou could place the image file in YOUR_HEXO_SITE\\themes\\hiker\\source\\css\\images directory. and modify home_background_image in hiker/_config.yml. 123# Homepage# eg. home_background_image: css/images/home-bg.jpghome_background_image: css/images/home-bg.jpg If you DON’T want any image as your homepage background, just set home_background_image empty in hiker/_config.yml, then you have an default homepage with random decorative pattern. Code Highlight ThemeHiker use Tomorrow Theme for your code block. We have six options in total: default, normal, night, night blue, night bright, night eighties Above preview picture is default theme. the image below show other five Highlight themes. Modify highlight_theme in hiker/_config.yml. 12345# Code Highlight theme# Available value:# default | normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: default Blog Theme ColorHiker provide five color themes for your blog. orange blue red green black You can modify theme_color in hiker/_config.yml. 1234# Article theme color# Available value:# random | orange | blue | red | green | blacktheme_color: random Night modeJust for article reading. In article page, you can click the logo image of header to switch to Night mode. SearchHiker use Insight Search to help you search anything inside your site without any third-party plugin. 12345# Searchsearch: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search, options: true, false Attention: You need to install hexo-generator-json-content before using Insight Search. 1$ npm install -S hexo-generator-json-content FancyboxHiker uses Fancybox to showcase your photos. You can use Markdown syntax or fancybox tag plugin to add your photos. 123![img caption](img url)&#123;% fancybox img_url [img_thumbnail] [img_caption] %&#125; SidebarYou can put your sidebar in left side, right side or bottom of your site by editing sidebar setting.Hiker provides 5 built-in widgets: category tag tagcloud archives recent_posts All of them are enabled by default. You can edit them in widget setting. Comment supportHiker has native support for DuoShuo &amp; Disqus comment systems. Modify the following snippets to hiker hiker/_config.yml: 123# comment ShortName, you can choose only ONE to display.duoshuo_shortname: iTimeTravelerdisqus_shortname: Browser support ContributingAll kinds of contributions (enhancements, new features, documentation &amp; code improvements, issues &amp; bugs reporting) are welcome. Looking forward to your pull request."},{"title":"Categories","date":"2016-08-16T07:00:44.000Z","updated":"2018-01-05T04:10:26.000Z","comments":false,"path":"categories/index.html","permalink":"https://tannisi.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2016-08-11T04:12:45.000Z","updated":"2018-01-05T04:10:26.000Z","comments":true,"path":"tags/index.html","permalink":"https://tannisi.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"进程与线程（二）","slug":"进程与线程（二）","date":"2018-01-26T04:13:55.000Z","updated":"2018-02-02T10:40:16.208Z","comments":true,"path":"2018/01/26/进程与线程（二）/","link":"","permalink":"https://tannisi.github.io/2018/01/26/进程与线程（二）/","excerpt":"线程 在传统操作系统中，每个进程有一个地址空间和一个控制线程。事实上这几乎就是进程的定义。不过经常存在在同一个地址空间中准并行运行多个控制线程的情形，这些线程就像分离的进程一样（共享地址空间除外）。 线程的使用 原因：（1）主要原因：在许多应用中同时发生着多种活动。其中某些活动随着时间的推移会被阻塞。通过将这些应用程序分解成可以准并行运行的多个顺序线程，程序设计模型就会变得很简单。【只是在有了多线程的概念之后，我们才加入了一种新的元素：并行实体拥有共享同一个地址空间和所有可用数据的能力。】","text":"线程 在传统操作系统中，每个进程有一个地址空间和一个控制线程。事实上这几乎就是进程的定义。不过经常存在在同一个地址空间中准并行运行多个控制线程的情形，这些线程就像分离的进程一样（共享地址空间除外）。 线程的使用 原因：（1）主要原因：在许多应用中同时发生着多种活动。其中某些活动随着时间的推移会被阻塞。通过将这些应用程序分解成可以准并行运行的多个顺序线程，程序设计模型就会变得很简单。【只是在有了多线程的概念之后，我们才加入了一种新的元素：并行实体拥有共享同一个地址空间和所有可用数据的能力。】（2）由于线程比进程更轻量级，所以它们比进城更容易（更快）创建，也更容易撤销。在许多系统中，创建一个线程较创建一个进程要快10~100倍。在有大量线程需要动态和快速修改时，具有这一特性是非常有用的。（3）有关性能方面，如果多个线程都是CPU密集型的，那么并不能获得性能上的增强，但是如果存在着大量的计算和大量的I/O处理，拥有多个线程允许这些活动彼此重叠进行，从而会加快应用程序执行的速度。在多CPU系统中，多线程是有益的，在这样的系统中，真正的并行有了实现的可能。下面我举个例子来说明引入多线程的好处： 假设用户正在写一本书。如果整本书是个文件，那么只要一个命令就可已完成全部的替换处理。相反，如果一本书分成了300个文件，那么就必须分别对每个文件进行编辑。现在考虑，如果有一个用户突然在一个有800页的文件的第一页上删掉了一个语句之后，会发生什么情形。在检查了所修改的页面并确认正确之后，这个用户现在打算接着在第600页上进行进行另一个修改，被强制对整本书的前600页重新进行格式处理， 这是因为在排列该页前面的所有页之前，字处理软件并不知道第600页的第一行应该在哪里。而在第600页的页面可以真正在屏幕上显示出来之前，计算机可能要拖延相当一段时间，从而令用户不甚满意。 这时，多线程可以在这里发挥作用。假设字处理软件被编写成含有两个线程的程序。一个线程与用户交互，而另一个在后台重新进行格式处理。一旦在第一页中的语句被删除掉，交互线程就立即通知格式化线程对整本书重新进行处理。同时，交互线程继续监控键盘和鼠标，并相应诸如滚动第1页之类的简单命令，此刻，另一个线程正在后台疯狂的运算，如果有点运气的话，重新格式化会在用户请求查看第600页之前完成，这样，第600页页面就立即可以在屏幕上显示出来。 我们可以在增加一个线程。许多字处理软件都有每隔若干分钟自动在磁盘上保存整个文件的特点，用于避免由于程序崩溃、系统崩溃或电源故障而造成用户一整天的工作丢失的情况。第三个线程可以用于处理磁盘备份，而不必干扰其他两个进程。拥有三个线程的情形如下图所示： 很显然，在这里用三个不同的进程是不能工作的，这是因为三个进程都需要对同一个文件进行操作。由于多个线程可以共享公共内存，所以通过用三个线程替代三个进程，使得他们可以访问同一个正在编辑的文件，而三个进程是做不到的。 现在考虑另一个多线程发挥作用的例子：一个万维网服务器。对页面的请求发送给服务器，而所请求的页面发送给客户机。在多数web站点上，某些页面较其他页面相比，有更多的访问。例如，对Sony主页的访问就远远超过对深藏在页面树里的任何特定摄像机的技术说明书页面的访问。利用这一事实，web服务器可以把获得大量访问的页面集合保存在内存中，避免到磁盘去调入这些页面，从而改善性能。这样的一种页面集合称为高速缓存. web服务器的3种设计方案多线程web服务器： 一种组织web服务器的方式如上图所示，在这里，一个称为分派程序的线程从网络中读入工作请求。在检查请求之后，分派线程挑选一个空转的（即被阻塞的）工作线程，提交请求，通常是在每个线程所配有的某个专门的字中写入一个消息指针。接着分派线程唤醒睡眠的工作线程，将它从阻塞状态转为就绪状态。 在工作线程被唤醒之后，它检查有关的请求是否在web高速页面缓存之中，这个高速缓存是所有线程都可以访问的。如果没有，该线程开始一个从磁盘调入页面的read操作并且阻塞直到该磁盘操作完成。当上述线程阻塞在磁盘操作上时，为了完成更多的工作，分派线程可能挑选另一个线程运行，也可能把另一个当前就绪的工作线程投入运行。 这种模型允许把服务器编写为顺序线程的一个集合。 在分配线程的程序中包含一个无限循环，该循环用来获得工作请求并把工作请求派给工作线程。每个工作线程的代码包含一个从分派线程接受的请求，并且检查web高速缓存中是否存在所需页面的无限循环如果存在，就将该页面返回给客户机，接着该工作线程阻塞，等待一个新的请求。如果没有，工作线程就从磁盘调入该页面，将该页面返回给客户机，然后该工作线程阻塞，等待一个新的请求。 下图给出了有关代码的大致框架（TRUE=1，buf和page分别是保存工作请求和web页面的相应结构）： 单线程web服务器： 一种可能的方式使其像一个线程一样运行。web服务器的主循环获得请求，检查请求，并且在取下一个请求之前完成整个工作。在等待磁盘操作时，服务器就空转，并且不处理任何到来的其他请求。如果该web服务器运行在唯一的机器上，通常情形都是这样的，那么在等待磁盘操作时CPU只能空转。结果导致每秒钟只有很少的请求被处理。可见线程较好地改善了web服务器的性能，而且每个线程是按通常方式顺序编程的。 有限状态机： 如果可以使用read系统调用的非阻塞版本，还存在第三种可能的设计。在请求到来时，这个唯一的线程对请求进行考察。如果该请求能够在高速缓存中得到满足，那么一切都好，如果不能，则启动一个非阻塞的磁盘操作 。 服务器在表格中记录当前请求的状态，然后去处理下一个事件。下一个事件可能是一个新工作的请求，或是对磁盘先前操作的回答。如果是新工作的请求，就开始工作。如果是磁盘的回答，就从表格中取出对应的消息，并处理该回答，对于非阻塞磁盘I/O而言，这种回答多数会以信号或中断的形式出现。 在这种设计中，每次服务器从为某个请求工作的状态切换到另一个状态时，都必须显示地保存或重新装入相应的计算状态。事实上，我们以一种困难的方式模拟了线程及其堆栈。这里，每个计算都有一个被保存的状态，存在一个会发生且使得相关状态发生改变的事件集合，我们把这类设计称为有限状态机。 下图给出了上述模式的总结： 多线程提供了一种解决方案，有关的进程可以用一个输入线程、一个处理线程和一个输出线程构造。输入线程把数据读入到到输入缓冲区中；处理线程从输入缓冲区中取出数据，处理数据，并把结果放到输出缓冲区中；输出线程把这些结果写到磁盘上。按照这种工作方式，输入、处理和输出可以全部同时进行。当然这种模型只有当系统调用只阻塞调用线程而不是阻塞整个进程时，才能正常工作。 经典的线程模型 进程模型基于两种独立的概念：资源分组处理与执行。有时将这两种概念分开会更好，于是引入了“线程”这一概念。 理解进程的一个角度是，用某种方法把相关资源集中在一起。进程有存放程序正文和数据以及其他资源的地址空间。这些资源中包括打开的文件、子进程、即将发生的定时器、信号处理程序、账号信息等。把它们都放到进程中可以更容易管理。 另一个概念是进程拥有一个可以执行的线程，简称为线程。在线程中有一个程序计数器，用来记录接着要执行哪一条指令。线程拥有寄存器，用来保存线程当前的工作变量。线程还拥有一个堆栈用来记录执行历史，其中每一帧保存了一个已调用的但是还没有从中返回的的过程。 尽管线程必须在某个进程中执行，但是线程和它的进程是不同的概念，并且可以分别处理。进程用于把资源集中到一起，而线程则是在CPU上被调度执行的实体。 在同一个线程中并行运行多个进程，是对在同一台计算机上并行运行多个进程的模拟。在前一种情形下，多个线程共享同一个地址空间和其他资源。而在后一种情形中，多个进程共享物理内存、磁盘打印机和其他资源。 由于线程具有进程的某些性质，所以有时被称为“轻量级进程”。 在下图a中可以看到三个传统的进程。每个进程有自己的地址空间和单个控制线程。每个线程都在不同的地址空间中运行。在图b中，可以看到一个进程带有三个控制线程。这三个线程全部在相同的地址空间中运行。 进程中的不同线程不像不同进程之间那样存在很大的独立性。所有的线程都有完全一致的地址空间，这就意味着他们也共享同样的全局变量。由于各个线程都可以访问进程地址空间中的每一个内存地址，所以一个线程可以读、写或甚至清除另一个线程的堆栈。线程之间是没有保护的。原因是：1）不可能 2）也没有必要 。这与不同进程是有差别的。不同的进程会来自不同的用户，它们彼此之间可能有敌意，一个进程总是由某个用户所拥有该用户创建多个线程应该是为了它们之间的合作而不是彼此间争斗。除了共享地址空间外，所有线程还共享同一个打开文件集、子进程、定时器以及相关信号等。 在下图中：第一列给出了在一个进程中所有线程共享的内容，第二列给出了每个线程自己的内容。 线程概念试图实现的是，共享一组资源的的多个线程的执行能力，以便这些线程可以为完成某一任务而共同工作。 和传统进程一样（即只有一个线程的进程），线程可以出于若干种状态的任何一个：运行、阻塞、就绪或终止。线程之间的转换和进程之间的转换是一样的。 每个线程都有其自己的堆栈，如上图所示。每个线程的堆栈中有一帧，供各个被调用但是还没有从中返回的过程使用。在该栈帧中存放了相应过程的局部变量以及过程调用完成之后使用的返回地址。 通常每个线程会调用不同的过程，从而有一个各自不同的执行历史，这就是为什么每个线程需要有自己的堆栈的原因。 线程的创建： 在多线程的情况下，进程通常会从当前的单个线程开始。这个线程有能力通过调用一个库函数（如thread_create）创建新的线程。thread_create的参数专门指定了新线程要运行的过程名。这里没有必要对新线程的地址空间加以规定，因为新线程会自动在创建线程的地址空间中运行。有时线程是有层次的，它们具有一种父子关系，但是通常不存在这样一种关系，所有的线程都是平等的。不论有无层次关系，创建线程通常都返回一个线程标识符，该标识符就是新线程的名字。 线程的终止： 当一个线程完成工作后，可以通过调用一个库过程（如thread_exit）退出，该进程接着消失，不再可调度。在某些线程系统中，通过调用一个过程(如：thread_join)一个线程可以等待一个特定的线程退出。这个过程阻塞调用线程直到那个特定线程退出。 thread_yield：另一个常见的线程调用是thread_yield，它允许线程自动放弃CPU从而让另一个线程运行。这样一个调用是很重要的，因为不同于进程，（线程库）无法利用时针中断强制线程让出CPU，所以设法使线程行为高尚起来并且随着时间的推移自动交出CPU，以便让其他进程有机会运行，就变得非常重要。有的调用允许某个线程等待另一个线程完成某些任务，或等待一个线程宣称它已经完成了有关的工作等。 线程所带来的一些问题：1）.如果父进程拥有多个线程，那么它的子进程也应该拥有这些线程吗？如果不是，则该子进程可能会工作不正常，因为在该子进程中的线程都是绝对必要的。2）.如果子进程拥有了与父进程一样多的线程，如果父进程在read调用上被阻塞了会发生什么情况？3）.还有一类问题和线程共享许多数据结构的事实有关等 POSIX线程","categories":[{"name":"现代操作系统学习","slug":"现代操作系统学习","permalink":"https://tannisi.github.io/categories/现代操作系统学习/"}],"tags":[{"name":"进程与线程","slug":"进程与线程","permalink":"https://tannisi.github.io/tags/进程与线程/"}]},{"title":"进程与线程（一）","slug":"进程与线程（一）","date":"2018-01-26T04:13:01.000Z","updated":"2018-01-27T10:31:41.777Z","comments":true,"path":"2018/01/26/进程与线程（一）/","link":"","permalink":"https://tannisi.github.io/2018/01/26/进程与线程（一）/","excerpt":"操作系统中最核心的概念是进程：这是对正在运行程序的一个抽象。操作系统的其他所有内容都是围绕着进程的概念展开的。 即使可以使用的CPU只有一个，但他们也具有支持（伪）并发操作的能力，它们将一个单独的CPU变换成多个虚拟的CPU。可以说：没有进程的抽象，现代计算将不复存在。","text":"操作系统中最核心的概念是进程：这是对正在运行程序的一个抽象。操作系统的其他所有内容都是围绕着进程的概念展开的。 即使可以使用的CPU只有一个，但他们也具有支持（伪）并发操作的能力，它们将一个单独的CPU变换成多个虚拟的CPU。可以说：没有进程的抽象，现代计算将不复存在。 进程 在任何多道程序设计系统中，CPU由一个进程快速切换至另一个进程，使每个进程各运行几十或几百毫秒。严格地说，在某一个瞬间，CPU只能运行一个进程。但在一秒钟内，它可能运行多个进程，这样就产生并行的错觉。有时人们所说的伪并行就是指这种情形，以此来区分多处理器系统（该系统有两个或多个CPU共享一个物理内存）的真正硬件并行。 进程模型 在进程模型中，所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程，简称“进程”。一个进程就是一个正在执行程序的实例，包括程序计数器、寄存器和变量的当前值。从概念上说，每个进程有它自己的虚拟CPU。当然实际上真正的CPU在各个进程之间来回切换。这种快速切换，被称为多道程序设计。 在下图（a）中可以看到，在一台多道程序计算机的内存中有四道程序。在下图（b）中，这4道程序被抽象为4个各自拥有自己控制流程（即每个程序自己的逻辑程序计数器）的进程，并且每个程序都独立地运行。当然实际上只有一个物理程序计数器，所以在每个程序运行时，它的逻辑程序计数器被装入实际的程序计数器中。当该程序执行结束（或暂停执行）时，物理程序计数器被保存在内存中该进程的逻辑程序计数器中。在下图c中可以看到，在观察足够长的一顿时间后，所有的程序都运行了，但在任何一个给定的瞬间仅有一个进程真正在运行。 由于CPU在各进程之间来回快速切换，所以每个进程执行器运算的速度是不确定的。而且当同一进程再次运行时，其运算速度通常不可再现。所以在对进程编程时决不能对时序做任何想当然的假设。然而，通常大多数进程并不受CPU多道程序设计或其它进程相对速度的影响。 进程和程序间的区别是非常微妙的，但非常重要。用一个比喻可以很容易理解这一点：想象有一位计算机科学家在位他的女儿烘制蛋糕。他有做生日蛋糕的食谱，厨房里有所需要的原料。则做蛋糕的食谱就是程序（即用适当形式描述的算法），计算机科学家就是CPU，厨房里的原料就是输入数据。进程就是厨师阅读食谱、取来原料以及烘制蛋糕等一系列动作的综合。 关键思想：一个进程是某种类型的一个活动，它有程序、输入、输出以及状态。单个处理器可以被若干进程共享，它使用某种调度算法决定何时停止一个进程的工作，并转而为另一个进程提供服务。 值得注意的是,如果一个程序运行了两遍，则算作两个进程。 进程的创建 在通用操作系统中，需要有某种方法在运行时按需要创建或撤销进程，现在开始考察这个问题。 4种主要事件会导致进程的创建：（1）系统初始化（2）正在运行的程序执行了创建进程的系统调用（3）用户请求创建一个新的进程（4）一个批处理作业的初始化 启动操作系统时，通常会创建若干个进程。其中有些是前台进程，也就是同用户（人类）交互并且替他们完成工作的那些进程。其他的是后台进程，这些进程与特定的用户没有关系，相反却具有某些专门的功能。停留在后台处理诸如电子邮件、web页面、新闻、打印之类的活动的进程称为守护进程。在大型系统中有很多守护进程。在UNIX中，可以用ps程序列出正在运行的进程；在Windows中，可使用任务管理器。 一个正在运行的进程经常发出系统调用，以便创建一个或多个新进程协助其工作。在所要从事的工作可以很容易的划分出成个若干相关的但没有相互作用的进程时，创建新的进程就特别有效果。 在交互式系统中，键入一个命令或点击一个图标就可以启动一个程序。这两个动作中的任何一个都会创建一个新的进程，并在其中运行所选择的程序。在基于命令行的UNIX系统中运行程序X，新的进程会从该进程接管它的窗口。 最后一种创建进程的情形仅在大型机的批处理系统中应用。用户在这种系统中提交批处理作业。在操作系统认为有资源可运行另一个作业时，它会创建一个新的进程，并运行其输入队列中的下一个作业。从技术上看，在以上所有的情形中，新进程都是由于一个已经存在的进程执行了一个用于创建进程的系统调用而创建的。这个进程所做的工作是，执行一个用来创建进程的系统调用。这个系统调用通知操作系统创建一个新进程，并且直接或间接地指定在该进程中运行的程序。在UNIX系统中，只有一个系统调用可以用来创建新的进程：fork。这个系统调用会创建一个与调用进程相同的副本。在调用了fork之后，这两个进程（父进程和子进程）拥有相同的内存映像、同样的环境字符串和同样的打开文件。这就是全部情形。通常子进程接着执行execve或一个类似的系统调用，已修改其内存映像并运行一个新的程序。之所以要安排两步建立进程，是为了在fork之后但在execve之前允许该子进程处理描述其文件描述符，这样就可以完成对标准输入文件、标准输出文件和标准错误文件的重定向。在Windows中情形正好相反，一个Win32函数调用CreateProcess（该调用有10个参数）既处理进程的创建，也负责把正确的程序装入新的进程。除了CreatProcess，Win32中有大约100个其他的函数用于处理进程的管理、同步以及相关的事务。在UNIX和Windows中，进程创建之后，父进程和子进程各拥有不同的地址空间。如果其中某个进程在地址空间中修改了一个字，这个修改对其他进程而言是不可见的。在UNIX中，子进程的初始地址空间是个父进程的一个副本，但是这里涉及两个不同的地址空间，不可写的内存区是共享的。某些UNIX的实现使程序正文在两者之间共享，因为它不能被修改。或者，子进程共享父进程的所有内存，但这种情况先内存通过写实复制共享，这意味着一旦两者之一想要修改部分内存 ，则这块内存首先被明确地复制，以确保修改发生在私有内存区域。再次强调，可写的内存是不可以共享的。但是对于一个新创建的进程而言，确实有可能共享其创建者的其他资源，例如打开的文件等。在Windows中，从一开始父进程的地址空间和子进程的地址空间就不同。进程的终止新的进程的终止，通常由下列条件引起：（1）正常退出（自愿的）（2）出错退出（自愿的）（3）严重错误（非自愿的）（4）被其他进程杀死（非自愿的） 多数进程是由于完成了它们的工作而终止。当编译器完成了所给定程序的编译之后，编译器执行一个系统调用，通知操作系统它的工作已经完成。在UNIX中该调用是exit，而在Windows中，相关的调用是ExitProcess。 第二个原因是：进程发现了严重错误。在给出了错误参数时，面向屏幕的交互进程通常并不退出。相反，这些程序会弹出一个对话框，并要求用户再试一次。 第三个原因：由进程引起的错误，通常是由于程序中的错误所致。例如执行了一条非法指令、引用不存在的内存、除数为0等。有些系统中（如UNIX），进程可以通知操作系统，它希望自行处理某些类型的错误，在这类错误中，进程会收到信号（被中断），而不是在这类错误出现时终止。 第四个原因：某个进程执行一个系统调用通知操作系统杀死某个其他的进程。在UNIX中这个系统调用是kill，在Win32中对应的函数是TerminateProcess。在这两种情形中，“杀手”都必须获得确定的授权以便进行动作。（在Linux中一般要赋予root权限，才能执行kill操作）进程的层次结构某些系统中，当进程创建了另一个进程后，父进程和子进程就以某种形式继续保持关联。子进程自身可以创建更多的进程，组成一个进程的层次结构。进程只有一个父进程，但是可以有零个、一个、两个或多个子进程。在UNIX中，进程和它的所有子进程以及后裔共同组成一个进程组。当用户从键盘发出一个信号时，该信号被送给当前与键盘相关的进程组中的所有成员（它们通常是在当前窗口创建的所有活动进程）。每个进程可以分别捕获该信号、忽略该信号或采取默认的动作，即被该信号杀死。考虑UNIX系统在启动时如何初始化自己。一个称为init的特殊进程出现在启动映像中，当它开始运行时，读入一个说明终端数量的文件。接着，为每个终端创建一个新进程。这些进程等待用户登录。如果有一个用户登录成功，该登陆进程就执行一个shell准备接收命令。所接收的命令会启动更多的进程，以此类推，这样整个系统中，所有的进程都属于以init为根的一棵树。相反，在Windows中没有进程层次的概念，所有的进程地位都是相同的。唯一类似于进程层次的暗示是在创建进程的时候，父进程得到一个特别的令牌（称为句柄）,该句柄可以用来控制子进程。但是，它有权把这个令牌传送给某个其他的进程，这样就不存在进程层次了。在UNIX中，进程就不能剥夺其子进程的“继承权”。进程的状态尽管每个进程是一个独立的实体，有其自己的程序计数器和内部状态，但是进程之间经常需要相互作用。一个进程的输出结果可能作为另一个进程的输入。当一个进程在逻辑上不能继续运行时，他就会被阻塞，典型的例子是它在等待可以使用的输入。还可能有这样的情况：一个概念上能够运行的进程被迫停止，因为操作系统调度另一个进程占用了CPU。这两种情况是完全不同的。在第一种情况下，进程挂起是程序固有的原因（在键入用户命令行之前，无法执行命令）。第二种情况则是由于系统技术上的原因引起的（由于没有足够的CPU，所以不能使每个进程都有一台私用的处理器）。在图1中可以看到显示进程的三种状态的状态图，这三种状态是：（1）运行态（该时刻进程实际占用CPU）（2）就绪态（可运行，但因为其它进程正在运行而暂时停止）（3）阻塞态（除非某种外部事件发生，否则进程无法运行）。 进程的三种状态之间有四种可能的转换关系。如图1所示。在操作系统发现进程不能运行下去时，发生转换1。在某些系统中，进程可以执行一个诸如pause的系统调用来进入阻塞状态。 转换2和3是由进程调度程序引起的，进程调度程序是操作系统的一部分，进程甚至感觉不到调度程序的存在。系统认为一个运行进程占用处理器的时间已经过长，决定让其他进程使用CPU时间时，会发生转换2.在系统已经让所有其他进程享有了他们应当应有的公平待遇而重新轮到第一个进程再次占用CPU时间时，会发生转换3。 当进程等待的一个外部事件发生时（如一些输入到达），则发生转换4.如果此时没有其他进程运行，则立即触发转换3，该进程便开始运行。否则该进程将处于就绪态，等待CPU空闲并且轮到它运行。调度程序的主要工作就是决定应当运行哪个进程、何时运行及它应该运行多长时间，这是很重要的一点。进程的实现为了实现进程模型，操作系统维护着一张表格（一个结构数组），即进程表。每个进程表占用一个进程表项。（有时也称进程控制块）该表项包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、账号和调度信息，以及其他在进程由运行态转换到就绪态或阻塞态时所必须保存的信息，从而保证该进程随后能再次启动，就像从未中断过一样。图2展示了在一个典型系统中的关键字段。与每一I/O类关联的是一个称作中断向量的位置（靠近内存底部的固定区域）。它包含中断服务程序的入口地址。假设当一个磁盘中断发生时，用户进程3正在运行，则中断硬件将程序计数器、程序状态字、有时还有一个或多个寄存器压入栈堆，计算机随机跳转到中断向量所指示的地址。这些是硬件完成的所有操作，然后软件，特别是终端服务例程就接管一切剩余的工作。所有的中断都从保存寄存器开始，对于当前进程而言，通常是保存在进程表项中。随后，会从堆栈中删除由中断硬件机制存入堆栈的那部分信息，并将堆栈指针指向一个由进程处理程序所使用的临时堆栈。一些诸如保存寄存器值和设置堆栈指针等操作，无法用C语言这一类高级语言来描述，所以这些操作通常通过一个短小的汇编语言里程来完成，通常该例程可以供所有的中断来完成，因为无论中端是怎样引起的，有关保存寄存器的工作则是完全一样的。当该例程结束后，它调用一个C过程处理处理某个特定的中断类型剩下的工作。在完成有关工作之后，大概就会使某些进程就绪接着调用调度程序，决定随后该运行哪个进程。随后将控制转给一段汇编语言代码，为当前的进程装入寄存器值以及内存映射并启动该进程运行。多道程序设计模型采用多道程序设计可以提高CPU的利用率。严格的说，如果进程用于计算的平均时间是进程在内存中停留时间的20%，且内存中同时有5个进程，则CPU将一直满负载运行。然而，整个模型在现实中过于乐观，因为它假设这5个进程不会同时等待I/O。更好的模型是从概率的角度来看CPU的利用率。假设一个进程等待I/O操作的时间与其停留在内存中的时间比为p。当内存中同时有n个进程时，则所有n个进程都在I/O的概率是Pn（幂指数）。CPU的利用率由下面的公式给出：CPU利用率 = 1-Pn图3以n为变量的函数表示了CPU的利用率，n称为多道程序设计的道数。如果进程花费80%的时间等待I/O，为使CPU的浪费低于10%，至少要有10个进程同时存在内存中。进程不是独立的。更精确的模型应该由排队论构建，但我们的模型（当进程就绪时，给进程分配CPU，否则让CPU空转）仍然是有效的，即使真实曲线会与图3略有不同。图3对预测cpu的性能很有效。例如：假设计算机有8GB的内存，操作系统及相关表格占用2GB，每个用户程序也占用2GB。这些内存空间允许3个用户程序同时驻留在内存中。若80%的时间用于I/O等待，这CPU的利用率大约是1-(0.80.80.8),即大约是49%.在增加8GB的内存后可从3道程序设计提高到7道程序设计，此时CPU的利用率提高到79%。提高了30%的吞吐量。增加第三个8GB的内存，CPU的利用率提高到91%，吞吐量的提高仅为12%.则第二次增加内存是不划算的。因此，盲目提高内存，有时提高不了多少性能，它还与系统等待I/O的时间、CPU的性能有关。","categories":[{"name":"现代操作系统学习","slug":"现代操作系统学习","permalink":"https://tannisi.github.io/categories/现代操作系统学习/"}],"tags":[{"name":"进程与线程","slug":"进程与线程","permalink":"https://tannisi.github.io/tags/进程与线程/"}]},{"title":"现代操作系统学习小结","slug":"现代操作系统学习小结","date":"2018-01-26T04:08:18.000Z","updated":"2018-01-26T05:14:08.418Z","comments":true,"path":"2018/01/26/现代操作系统学习小结/","link":"","permalink":"https://tannisi.github.io/2018/01/26/现代操作系统学习小结/","excerpt":"引论（1）考察操作系统有两种观点：资源管理观点和扩展的机器观点。在资源管理观点中，操作系统的任务是有效的管理系统的各个部分。在扩展的机器观点中，系统的任务是为用户提供比实际机器更便于运用的抽象。这些抽象包括进程、地址空间以及文件。（2）操作系统的历史很长，从操作系统开始替代操作人员的那天开始到现代多道程序系统，主要包括早期批处理系统、多道程序系统以及个人计算机系统。","text":"引论（1）考察操作系统有两种观点：资源管理观点和扩展的机器观点。在资源管理观点中，操作系统的任务是有效的管理系统的各个部分。在扩展的机器观点中，系统的任务是为用户提供比实际机器更便于运用的抽象。这些抽象包括进程、地址空间以及文件。（2）操作系统的历史很长，从操作系统开始替代操作人员的那天开始到现代多道程序系统，主要包括早期批处理系统、多道程序系统以及个人计算机系统。（3）所有操作系统构建所依赖的基本概念是进程、存储管理、I/O管理、文件管理和安全。（4）任何操作系统的核心是它可处理的系统调用集。这些系统调用真实的说明了操作系统所做的工作。对于UNIX，我们已经考察了四组系统调用。第一组系统调用同进程的创建和终止有关，第二组用于读写文件，第三组用于目录管理，第四组用于各种杂项调用。（5）操作系统的构建方式有多种，最常见的有单体系统、层次化系统、微内核系统、客户端-服务器系统、虚拟机系统以及外核系统。","categories":[{"name":"现代操作系统学习","slug":"现代操作系统学习","permalink":"https://tannisi.github.io/categories/现代操作系统学习/"}],"tags":[{"name":"操作系统学习小结","slug":"操作系统学习小结","permalink":"https://tannisi.github.io/tags/操作系统学习小结/"}]},{"title":"依靠C的世界——编写操作系统","slug":"依靠C的世界——编写操作系统","date":"2018-01-25T12:33:26.000Z","updated":"2018-01-26T04:05:41.249Z","comments":true,"path":"2018/01/25/依靠C的世界——编写操作系统/","link":"","permalink":"https://tannisi.github.io/2018/01/25/依靠C的世界——编写操作系统/","excerpt":"操作系统通常是由许多程序员写成的，包括很多部分的大型C（有时是C++）程序。 C语言 在C中基本数据类型是整数（包括短整数和长整数）、字符和浮点数等。使用数组、结构体和联合，可以构造组合数据类型。C语言中的控制语句与Java类似，包括if、、switch、for以及while等语句。在这两个语言中，函数和参数大致相同。","text":"操作系统通常是由许多程序员写成的，包括很多部分的大型C（有时是C++）程序。 C语言 在C中基本数据类型是整数（包括短整数和长整数）、字符和浮点数等。使用数组、结构体和联合，可以构造组合数据类型。C语言中的控制语句与Java类似，包括if、、switch、for以及while等语句。在这两个语言中，函数和参数大致相同。 一项C语言中有而Java和Python中没有的特点是显式指针。指针是一种指向（即包含对象的地址）一个变量或数据结构的变量。C语言中没有内建字符串、线程、包、类、对象、类型安全以及垃圾回收等。最后一个是操作系统的“淋浴器塞子”。在C中分配的存储空间或者是静态的，或者是程序员明确分配和释放的，通常使用malloc以及free库函数。正是由于后面的这个性质——由程序员控制所有内存——而且是明确的指针，使得C语言対编写操作程序而言非常有吸引力。从一定程度上来说，操作系统实际上是一个实时操作系统，甚至通用系统也是实时系统。当中断发生时，操作系统可能只有若干微秒去完成特定的操作，否则会丢失关键的信息。在任意时刻启动垃圾回收功能是不可接受的。 头文件 一个操作系统项目通常包括多个目录，每个目录都含有许多.c文件，这些文件中存有系统某个部分的代码，而一些.h头文件则包含供一个或多个代码文件使用的声明及定义。头文件还可以包含简单的宏，宏允许程序员命名常数宏可以附带参数。头文件汉可以包含条件编译，例如： #ifdef X86 intel_int_ack(); #endif 如果宏X86有定义，而不是其他，则编译进对Intel_int_ack函数的调用。为了分隔与结构有关的代码，大量使用了条件编译，这样只有当系统在X86上编译时，一些特定的代码才会被插入，其他的代码仅当系统在SPARC等机器上编译时才会插入。通过使用#include指令，一个.c文件体可以含有一个或多个头文件。 大型编程项目 为了构建操作系统，每个.c被C编译器编译成一个目标文件。目标文件使用后缀.o，含有目标机器的二进制代码。随后它们可以直接在CPU上运行。在C的世界里，没有类似于Java字节代码的东西。 补充：（Java 字节码（英语：Java bytecode）是Java虚拟机执行的一种指令格式。大多数操作码都是一个字节长，而有些操作需要参数，导致了有一些多字节的操作码。而且并不是所有可能的256个操作码都被使用；其中有51个操作码被保留做将来使用。除此之外，原始Java平台开发商，Sun Microsystems系统，额外保留了3个代码永久不使用。） C预处理器+C编译器 C编译器的第一道称为C预处理器。在它读入每个.C文件时，每当遇到一个#include命令，就取来该名称的头文件，并加以处理、扩展宏、处理条件编译（以及其他事务），然后将结果传递给编译器的下一道，仿佛它们原先就包含在该文件中一样。 make程序 由于操作系统是非常庞大的，每当文件修改后就重新编译时无法忍受的。另一方面，改变了用在成千上万文件中的一个关键头文件，确实需要重新编译这些文件。没有一定的协助，想要记录哪个目标文件和哪个头文件相关是完全不可行的。 在UNIX系统中，有个名为make的程序，它读入Makefile文件，该Makefile说明哪个文件与哪个文件相关。make的作用是，在构建操作系统二进制编码时，检查此刻需要哪个目标文件，而且对于每个文件，检查自从上次目标文件创建之后是否有任何它依赖的文件（代码和头文件）已经被修改了。如果有，目标文件需要重新编译。在make确定了哪个.o文件需要重新编译后，他调用C编译器重新编译这些文件，这样就把编译的次数降到了最低限度！ linker程序形成可执行文件a.out文件 一旦所有的.o文件就绪，这些文件就被传递给称为linker的程序，将其组合成一个可执行的二进制文件。此时，任何被调用的库函数到包含在内，函数之间的引用都已解决，而机器地址也已经按需分配完毕。在linker完成之后，得到一个可执行程序，在UNIX中传统上称为a.out文件。该过程的各个部分如下图所示： 运行模型 在操作系统二进制代码链接完成后，计算机就可以重新启动，新的操作系统开始运行。一旦运行，系统会自动调入那些没有静态包括在二进制代码中的模块，如设备驱动和文件系统。在运行过程中，操作系统可能有若干段组成，有文本段(程序代码)、数据段和栈堆段。文本段通常是不可改变的，在运行过程中不可修改。数据段开始时有一定的大小，并用确定的值进行初始化，但是随后就被修改了，其大小随需要增长。栈堆段被初始化为空，但是随着对函数的调用和从函数返回，栈堆段时时刻刻在增长和缩小。通常文本段放置在接近内存底部的位置，数据段在其上面，这样可以向上增长。而栈堆段处于高处的虚拟地址，具有向下增长的能力，不过不同系统的工作方式各有差别。 在所有情形下，操作系统代码都是直接在硬件上执行的，不用解释器，也不是即时翻译，如Java通常做的那样。 ACM https://www.acm.org/IEEE计算机协会 https://www.computer.org/USENIX https://www.usenix.org/","categories":[{"name":"现代操作系统学习","slug":"现代操作系统学习","permalink":"https://tannisi.github.io/categories/现代操作系统学习/"}],"tags":[{"name":"简介编写操作系统的环境","slug":"简介编写操作系统的环境","permalink":"https://tannisi.github.io/tags/简介编写操作系统的环境/"}]},{"title":"计算机网络原理和因特网","slug":"计算机网络原理和因特网","date":"2018-01-23T06:32:33.000Z","updated":"2018-01-23T06:50:45.799Z","comments":true,"path":"2018/01/23/计算机网络原理和因特网/","link":"","permalink":"https://tannisi.github.io/2018/01/23/计算机网络原理和因特网/","excerpt":"一、计算机网络定义1.计算机网络的五大基本元素（1）主机（用户终端、服务器）（2）交换节点 （3）通信链路 （4）拓扑结构 （5）通信软件2.计算机网络的公共特性（1）覆盖范围 ：按网络覆盖地理范围大小加以区分（2）传输方式 ：按网络传输数据方式加以区分（3）交换技术 ：按网络交换数据技术加以区分 二、计算机网络分类概述1.按网络覆盖范围分类个域网、局域网、城域网、广域网2.按网络传输技术分类广播发送、点-点传播（复杂性较高）3.按数据交换技术分类（数据交换效率越来越高）电路交换（电话）、包交换（计算机网络）4.按传输介质分类（信道访问技术越来越难）有线网络、无线网络","text":"一、计算机网络定义1.计算机网络的五大基本元素（1）主机（用户终端、服务器）（2）交换节点 （3）通信链路 （4）拓扑结构 （5）通信软件2.计算机网络的公共特性（1）覆盖范围 ：按网络覆盖地理范围大小加以区分（2）传输方式 ：按网络传输数据方式加以区分（3）交换技术 ：按网络交换数据技术加以区分 二、计算机网络分类概述1.按网络覆盖范围分类个域网、局域网、城域网、广域网2.按网络传输技术分类广播发送、点-点传播（复杂性较高）3.按数据交换技术分类（数据交换效率越来越高）电路交换（电话）、包交换（计算机网络）4.按传输介质分类（信道访问技术越来越难）有线网络、无线网络 三、基于网络覆盖范围的分类1.个域网（PAN）：覆盖的地理范围通常围绕着一个人通信用的设备（如无线键盘、无线鼠标等）（可用蓝牙来组网）。2.局域网（LAN）：覆盖的地理范围通常为一个办公室、一个楼层、一座建筑物（组网方式：所有主机都连接在一个网络专用设备（如集线器等），以竞争的方式使用信道）2.1局域网络——无线局域网（WLAN）：通常用在一个办公区域、家居环境、机场、车站等公共区域（一般用WiFi）。无线局域网中（WiFi）的组网方式：所有用户终端通过无线介质连接到一个提供无线接入功能的高性能基站3.城域网（MAN）：覆盖的地理范围通常为一座城市。（组网方式：用户终端通过无线介质连接到一个提供无线接入功能的高性能基站）（一般采用“全球微波互联技术”）4.广域网（WAN）：覆盖的地理范围非常大，可达数百公里或数千公里。组网方式：节点之间通过点-点链路连接成一定拓扑结构的网状形式。 四、基于网络传输技术的分类1.广播网络：广播网络只有一个通信信道（共享介质）。网络上所有的主机/节点共享该信道进行数据通信。（一般有三种方式：单播、广播、组播）一般用总线型结构来表示。介质访问控制（MAC）：负责共享信道带宽的分配和管理。（有两种分配模式：静态分配和动态分配）静态分布：固定分配模式、控制算法简单、资源利用率低动态分布：按需分配模式、控制算法复杂、资源利用率高2.点-点网络————拓扑结构：由许多一对对计算机之间的链路组成。拓扑结构：指计算机网络的物理布局。分为：星型、环型、树型、全连通也有三种模式：点-点单播、点-点广播、点-点组播点-点网络——多跳传输：指信息的传递需要借助其恰当的其他节点辅助才能完成传输。3.（1）小型、地理位置集中的网络多采用广播形式 （2）大型、地理位置分散的网络多采用点到点方式 五、计算机网络的一般形式1.因特网一般形式2.课程展开的主要内容（1）.计算机网络的核心技术（2）.接入网有哪些技术（3）.在同一网络中主机通信（4）.在不同网络中主机通信（5）.在不同主机上进程通信（6）.网络服务/安全怎么做3.在TCP/IP网络体系结构下，自底向上位于第二层的是：网络层 六、电话网络与电路交换1.什么是交换？交换过程：把主叫方的电话线与被叫方的电话线用跳线电缆连接起来的过程。特点：（1）.主叫方和被叫方必须建立一条专用电路 （2）.在通信期间该电路保持连接并不为他人用2.电话系统的扩展性（如两个城市之间的电话通信）（1）.当网络规模增大时通常采用层次型管理模式。（2）.电话接通时间取决于主叫和被叫的距离和途径交换局数目。3.实例：采用电路交换技术假设：（1）.H1给H6发送查毒为7.5Mbits的文件 （2）.建立电路需要10秒；忽略传播延迟试问：将文件从H1传输到H6需多长时间？解:H1发送文件所需时间=7.5/1.5=5s 传输该文件所需的总时间=连接建立时间+发送文件时间=15s4.电路交换技术本质(1).发送方H1按固有的发送频率把文件发送到电路上(2).表示文件的信号沿着电路一路传播到目的地H65.电路交换技术特性优点：实时性好（仅信号传播时延）、稳定的数据传输速率、不存在信道访问延时缺点：不能充分发挥传输介质潜力、长距离电路的建立时间长、扩展性较差（硬件成本） 七、计算机网路与包交换技术1.包交换技术的核心是：存储-转发技术（包/分组：大小固定的数据块）存储-转发：交换节点接受并存储包，然后根据包的目标地址转发该包到通往目的地的出境线路上。2.基于“存储-转发”包交换技术：（1）每个包要指明详细的目的地址（2）交换机根据每个包的目的地址转发 入境线路：报文到达的线路 出境线路：发送报文的线路3.“存储-转发”时延存储转发时延=处理时延（处理时间+发送时间）+排队时延（等待输出的排队时间）4.包交换技术的本质（1）线路上报的顺序是不固定的（2）交换机不必为用户预留资源（3）交换机以及线路等资源按需分配（4）交换机不必记忆每对用户通信状态5.报文与包/分组（1）报文：用户发送的原始数据 包/分组：大小固定的数据块（无完整意义）（2）如果数据报随着用户数据块大小可变：处理时间不确定、小报文的时延大、缓冲区大小无法确定6.实例：采用包交换技术假设：（1）H1给H6发送长度为7.5Mbits的文件（2）包的大小为1500b；忽略传播延迟试问：将文件从H1传播到H6需多长时间？解：第一个包从H1发到S1需要时间1ms 5000ms后最后一个包从H1到达S1 经过三次转发最后一个包到达H6 从H1发送文件到H6总共需要5.003s7.并发传输特性：当第一个包抵达目的地、最后一个包尚未发出时，沿途每个交换机都在并发的传输经过的每个包。8.包交换技术特性优点：（1）将数据分流到不同路径—使得带宽资源利用更加有效（2）若链路出现故障同一个报文剩余包可通过其他路径传送缺点：（1）存储-转发延迟可能会很大（2）排队延迟不确定（与流量成正比）（3）包丢失——报文丢失概率增大 八、电路交换与包交换1.用户电路交换（1）建立电路需要的时间：长短与距离和途径交换机数目有关（2）发送文件需要的时间：长短与文件大小和发送速率有关（3）沿传输介质传播的时间：长短与距离和传输介质有关包交换（1）发送方顺序发送各个包：时间长短与包的大小和发送速率有有关（2）途径交换机“存储-转发”处理：时间长短与处理时延和排队时延有关（3）沿每段传输介质传播：时间长短与该段介质和距离有关2.网络管理者电路交换机针对每对用户的电路建立：（1）确立通往目的地的路径（2）为每条电路预留资源（3）服务用户数受系统容量限制包交换机针对每个包的存储-转发（1）确定通往目的地路径（2）包排入队列等待发送（3）用户数/流量增大影响包传输时间3.包交换与电路交换的系统容量4.计算机网络采用包交换技术（1）包交换机的处理复杂性低（2）包交换系统资源得到有效利用（3）用户数据流可以并发多路径传输电路交换机：任何时候文件只出现在一个地方——串行传输包交换机：文件被分散在每段线路、每个交换机——并行传输 九、评价网络性能的指标1.信道的传输能力传输能力：指传输数据的能力带宽/吞吐量：信号具有的频带宽度，单位是赫（Hz）数据率/比特率：传送数字信号的速率，单位是bps2.（网卡）发送时延/传输时延发送时延：发送时延指的是数据块从第一个比特开始发送算起，到最后一个比特发送完毕所需要的时间。3.信道传播时延传播时延：信号在信道中传播一定距离而花费的时间传播延迟：4.（交换节点）处理/“存储-转发”时延处理/“存储-转发”时延：交换节点为“存储-转发”而进行必要的处理所花费的时间（包的处理、路径的选择、排队等待输出）。发送时延/传输时延：使数据块从节点进入传输介质所需要的时间5.(报文)传输时延时延/延迟：一个报文/包从一个网络（或一条链路）的一端传送到另一端所需要的时间。6.丢包率丢包率：丢失的包与发送的全部包的比率丢包原因：（1）交换机的队列长度有限（2）包到达队列为满时将被丢弃（3）被丢弃的包（可能）需要重发7.吞吐量（通常是端到端的）吞吐量：发送者和接收者之间传输数据获得的比特率瞬时速率：在给定点测的的速率平均速率：长期传输拥有的速率瓶颈链路：制约着端-端吞吐量的那条链路8.数据发送速率越高传送的越快？9.计算机网络性能小结处理时延：存储-转发时延与发送和次数有关传播时延：与距离和介质有关丢包率：与介质和负载有关吞吐量：取决于瓶颈链路的带宽","categories":[{"name":"网络原理","slug":"网络原理","permalink":"https://tannisi.github.io/categories/网络原理/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://tannisi.github.io/tags/计算机网络/"}]},{"title":"asc18预赛通知英文原版","slug":"asc18预赛通知英文原版","date":"2018-01-19T09:03:25.000Z","updated":"2018-01-25T13:32:00.405Z","comments":true,"path":"2018/01/19/asc18预赛通知英文原版/","link":"","permalink":"https://tannisi.github.io/2018/01/19/asc18预赛通知英文原版/","excerpt":"asc18预赛通知英文原版","text":"asc18预赛通知英文原版","categories":[{"name":"技术比赛","slug":"技术比赛","permalink":"https://tannisi.github.io/categories/技术比赛/"}],"tags":[{"name":"asc18","slug":"asc18","permalink":"https://tannisi.github.io/tags/asc18/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-01-18T02:59:06.077Z","updated":"2018-01-18T02:59:06.041Z","comments":true,"path":"2018/01/18/hello-world/","link":"","permalink":"https://tannisi.github.io/2018/01/18/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"asc18预赛通知汉译版含附件","slug":"asc18预赛通知汉译版含附件","date":"2018-01-17T08:10:32.000Z","updated":"2018-01-25T13:31:46.533Z","comments":true,"path":"2018/01/17/asc18预赛通知汉译版含附件/","link":"","permalink":"https://tannisi.github.io/2018/01/17/asc18预赛通知汉译版含附件/","excerpt":"ASC学生超算竞赛（2018）预赛通知亲爱的参赛团队： 非常感谢你参加ASC18大学生超算竞赛，这篇文档将会提供此次比赛初赛的详细信息。1.关于这个初赛 在初赛中，每个注册队伍被要求去提交一系列文档包括一份提案，优化的源代码文件和输出文件（在附件A中有详细要求）。该提案需要用英语去写，并由ASC评估委员会审查。","text":"ASC学生超算竞赛（2018）预赛通知亲爱的参赛团队： 非常感谢你参加ASC18大学生超算竞赛，这篇文档将会提供此次比赛初赛的详细信息。1.关于这个初赛 在初赛中，每个注册队伍被要求去提交一系列文档包括一份提案，优化的源代码文件和输出文件（在附件A中有详细要求）。该提案需要用英语去写，并由ASC评估委员会审查。 2.提交指南 所有的参赛团队应当在2018年3月13日的上午八点（世界标准时间8:00）之前提交到info@asc-events.org。你的提交确认将会通过邮件发送给你。提交的内容应当包含下列项目:a) 提案文件（可以是.doc或PDF格式），用学校或学院的名字（英文中的college其实应当是大学、独立学院）和联系人的名字（例如:AAAUniversity_BBB.doc）。b）附加文档应当被压缩成一个文件（例如：AAAUniversity_BBB.zip,其他类型的压缩格式也是可以的。）除了要求的RELION文件（具体的细节要求见附件A）。压缩文件应该至少包括（具体的细节要求见附件A）: （1）HPL的输出文件 （2）HPCG的输出文件 （3）搜索查询所需的答案预测文件3.有关比赛的任何进一步查询，请通过以下电子邮件与ASC委员会联系：a）技术支持：techSupport@asc-events.orgb) 比赛组织：info@asc-events.orgc) 新闻和媒体：media@asc-events.org 我们在ASC18比赛中祝您好运！ ASC18委员会 01-16-2018 附件A：提案要求一、简要介绍大学或者学院的超级计算机活动（5分）1.超级计算机相关的硬件和软件平台2.超级计算机相关的课程、培训和兴趣小组3.超级计算机相关的研究和应用4.对超级计算机研究的关键成果（两项以上）进行详细说明，附上证明材料（公开文件、颁发证书等）。 二、团队介绍（5分）1.简述你的团队的组建过程。2.简述每个团队成员（包括团队的几组照片）。3.你的团队的口号 三、技术提案要求（90分）1.你的HPC系统的设计（15分）a)在3000瓦功率预算内，你的系统应该达到最佳的计算性能。b）制定你的系统的软件和硬件配置和互联。描述功耗，评估性能，并分析你提出的架构的优缺点。c）你的系统应当基于浪潮NF5280M5服务器。浪潮将向进入决赛的队伍提供下表中列出的组件（可能会更改配置）。其他组件（服务器本身除外）均可接受，但应该自行准备。例如，你可以更改建议配置中NF5280M5服务器和加速器的数量，硬盘和内存的类型以及以太网的类型。 项目 名称 配置 服务器 浪潮NF5280M5 CPU： 英特尔至强金牌6132*2 , 2.6GHZ ， 14 core 内存： 16G*12 ， DDR4 ， 2666Mhz 硬盘： 1T STAT * 1 功耗估算： 6132 TDP 140W （CPU）， memory 7.5W ，硬盘 10W HCA卡 FDR Infiniband Mellanox ConnectX-3 适配卡，单端口QSFP，FDR IB (主机通道适配卡) 功耗估算： 9W (INfiniband 直译为无限带宽技术） 交换机 千兆以太网交换机 10/100/1000Mb/s， 24 端口以太网交换机 功耗估算: 30W FDR-IB交换机 SwitchX FDR InfiniBand交换机，36个QSFP 端口 功耗估算： 130W 电缆 千兆CAT6电缆 CAT6铜缆 ， 蓝色 ， 3m Infiniband电缆 Infiniband FDR 光钎电缆，QSFP端口，配合Infiniband交换机使用 2.HPL 和 HPCG（15分） 建议书（提案）应当包括软件环境（操作系统，编译器，数学库，MPI软件，软件版本等）的描述，测试方法，性能优化方法，性能评估，问题和解决方案分析等。推荐HPL算法和源代码分析。 HPL软件可以被下载在：http://www.netlib.org/benchmark/hpl/. HPCG软件可以被下载在：https://github.com/hpcg-benchmark/hpcg 建议在X86的CPU或GPU平台上成功验证和优化HPL和HPCG。但是，鼓励那些无法访问平台并且不得不使用自己的硬件平台的团队提交自己的问题和结果。 3.RELION测试 a）应用背景 自成立以来，结构生物学在生物学研究中发挥着重要的作用。结构生物学试图通过解决高分辨率的生物大分子结构来解释生物过程。通常情况下，有三种方法来确定生物大分子的三维结构，包括X射线晶体学，低温电子显微镜（cryo-EM），核磁共振（NMR）。近年来，随着技术的不断创新，特别是直接电子探测相机的发展以及复杂的图像处理算法的发展，冷冻电镜已成为近原子分辨率研究生物大分子三维结构最重要的工具。该技术也被称为冷冻电镜单粒子分析（SPA），从冷冻电镜的小分子溶液开始，需要收集成千上万的高质量冷冻电镜显微照片校正（运动和畸变校正，剂量加权）和评估，对比度 传递函数（CTF）估计，粒子选择和排序，二维和三维分类，定向精化和重建以及后处理（地图锐化）。由于有限的照射剂量会产生一个非常嘈杂的生物大分子图像，嵌入到冰核中，因此需要数以万计的粒子图像来提高信噪比（SNR）。图像处理的基本原理和原理已经被充分描述 在参考中【1】。 目前最流行的用于处理冷冻电磁场数据的开源软件是RELION，它利用最大似然法和贝叶斯统计来克服低信噪比引起的每个粒子定向确定的模糊性。RELION的数学原理和算法 在参考文献[2]和[3]中进行了充分的描述。RELION的最新版本是稳定的，其源代码在参考文献[4]中可用。关于RELION的安装和使用的更多信息可以从参考文献[5]中找到。 在这里，我们提供了在细胞中储存铁的人类载脂蛋白铁蛋白复合物的cryo-EM SPA数据集。 从原始的原始显微照片中挑出原始颗粒，并堆积成不同的MRC文件（* .mrcs）。每个颗粒的成像条件和估计的CTF参数已经列在STAR文件（particle.star）中。初始低分辨率 （run_ct24_class001.mrc）。这个挑战是尝试使用RELION 2.1进行图像分析，包括2D（步骤1），3D分类（步骤2）和最终的3D重建（步骤3） ）。详细信息请参阅补充说明。参考：【1】.orlova,E.V. &amp; Saibil,H.R. structural analysis of macromolecular by electron microscopy. Chem Rev 111,7710-7748,doi:10.1021/cr100353t(2011). （奥尔洛娃，E.V。 ＆Saibil，H.R。 电子显微镜对大分子的结构分析。 Chem Rev 111,7710-7748，doi：10.1021 / cr100353t（2011）。）【2】. Scheres(2012) J.Mol.Biol.(PMID:22100448)【3】. Scheres(2012) J.Struct.Biol.(PMID:23000701)【4】. Relion source code:https://github.com/3dem/relion/releases (version 2.1 Stable)【5】. Relion wiki:http://www2.mrc-lmb.cam.ac.uk/relion/index.php/Main_Pageb)测试命令介绍 在这个挑战中，鼓励所有参与者完成计算，获得正确的答案（原文是right rights），并尽力减少计算的需求，包括时间和资源。建议文档应包括软件环境的描述（操作系统，编译器，数学库 MPI软件和RELION版本等），测试方法，性能优化方法，性能评估，问题和解决方案分析等。对RELION算法和源代码的深入分析受到了极大的鼓励。下面列出了这个挑战的具体任务和要求。 1.编译并安装RELION，按照步骤1到步骤3的指令针对给定的数据运行程序。请提交最后一次迭代生成的文件，每个步骤的屏幕输出和每个步骤的命令行，这些文件应该压缩成 tar.gz文件（请参见下表）。要注意的是，在第3步的最后一个迭代中生成的文件不会与“ite”标记一起出现。 压缩文件的名称 内容 步骤1 Step1.Class2D.tar.gz _it025_classes.mrcs _it025_data.star _it025_model.star _it025_optimiser.star _it025_samling.star Command line file(*.sh) Screen output(*.log) 步骤2 Step2.Class3D.tar.gz _it040_class001_angdist.bild _it040_class001.mrc _it040_class002_angdist.bild _it040_class002.mrc _it040_class003_angdist.bild _it040_class003.mrc _it040_class004_angdist.bild _it040_class004.mrc _it040_data.star _it040_model.star _it040_optimiser.star _it040_sampling.star Command line file(*.sh) Screen output(*.log) 步骤3 Step3.Refine3D.tar.gz _model.star _sampling.star _data.star _class001_angdist.bild _class001.mrc Command line file(*.sh) Screen output(*.log) 要求的RELION文件应上传到百度SkyDrive或微软OneDrive，并将下载链接与上传文件的MD5代码复制到您的建议中（如果需要，请提供密码）。2.提交一个描述和总结，用什么样的计算资源（配置和架构）来完成计算，每个步骤需要多长时间（鼓励提交一个日志文件）。你也可以描述你 编译软件包，以及是否对代码进行一些修改，如何做的以及为什么。3.描述您认为（或已经执行）的策略，可以用来减少这种计算挑战的计算需求。4.请注意，每个带有其值的参数对于确保结果的一致性都是必需的。但关于应用程序性能的参数，您可以根据您的平台查看它们，但我们没有在此说明中展示它们。Step 1.运行原始粒子图像的2D分类，命令可以如下所示。输出应该像下面这样（通过反向排序的类分布显示）Step 2.运行初始参考模型的原始粒子图像的3D分类。命令如下所示。输出应该像下面这样（通过反向排序的类分布显示）Step 3.从初始参考模型开始运行3D重构和细化。命令如下所示。输出是人类apo-铁蛋白（.mrc文件）的最终重构3D结构，分辨率为〜3.3埃，可以通过使用UCSF Chimera (https://www.cgl.ucsf.edu/chimera/) 阈值为0.03（见下图）。RELION工作负载可从以下网站下载：Microsoft OneDrive:https://1drv.ms/f/s!AkxzxKN8axg2xCptYHmT1QMN_iQ-orBaidu SkyDrive:https://pan.baidu.com/s/1nwpZFHv Password: vsyh(两个网站上的数据是相同的，你可以选择任何一个网站下载) 4.搜索查询的答案预测（30分）任务 建立一个具有阅读理解能力（RC）或对现实世界数据的开放式问题回答（QA）的智能代理（我认为是助理）是人工智能的一个主要目标。这样的助理可以为消费者带来巨大的价值，因为他们可以为个人助理提供支持，如Cortana，Siri，Alexa或Google Assistant，这些都是近期深度语音识别技术发展的助力。随着这些类型的助理逐渐普及，消费者发现通过语音辅助来快速获得答案，而不是通过搜索引擎结果页面和网页浏览器，可以更方便地提出问题。具有RC和QA能力的智能代理也可以 具有令人难以置信的商业价值，通过动力的机器人自动化客户服务代理通过消息或聊天界面发现的业务。MSMARCO是一个大型的真实世界的阅读理解数据集，针对上述任务。数据集中的问题是通过Bing或Cortana发出的真实匿名查询，文档是相关的网页，可能会或可能不足以回答问题。对于数据集中的每一个问题，我们都要求众包工作者回答它，如果可能的话，还要标记相关的段落，为答案提供支持信息。如果他们不能回答，我们就认为这个问题是无法回答的，我们也包括MSMARCO中的样本。（不清楚这是什么意思！） 答案强烈建议采用完整的句子形式，因此工作人员可以自己写一个长篇文章.MSMARCO包括10万个问题，100万个段落，以及超过20万个文档的链接。任务需要用户找到最好的算法，可以找到所有候选人（段落）的最佳答案（段落），或者自己写出最佳答案（段落）。 数据集 格式数据库使用JSON格式化，每个例子有五个字段： 字段 定义 查询 问题查询来自Bing搜索引擎的真实用户 段落 从公共Web文档中提取的前10个关联段落来回答 文档链接 为查询排名的顶级文档的URL。这些文档是上下文段落的来源 答案 答案合成来自查询的人工判断，自动提取段落及其相应的公共Web文档 分割 QA分类标签。 例如，南美洲最高的山属于实体部分，因为答案是一个实体（阿空加瓜） 注意：描述查询的唯一目标（例如使用“query_type”：“description”） 挑战将使用两个不同的数据集初赛和决赛。请注意，只有训练和开发集有标签。 阶段1 （初步） 训练集 https://msmarco.blob.core.windows.net/msmarco/train_v1.1.json.gz 开发集 https://msmarco.blob.core.windows.net/msmarco/dev_v1.1.json.gz 测试集 https://msmarco.blob.core.windows.net/msmarco/test_public_v1.1.json.gz 阶段2 （决赛） 训练集 将会在决赛的时候宣布 开发集 将会在决赛的时候宣布 测试集 将会在决赛的时候宣布 结果提交A：每个团队都应该提交一个名为output.json的文件，该文件包含Test.Set上每个描述查询的答案（段落）。测试结果应该使用JSON，并遵循以下格式： 翻译：{“询问”：“化石燃料有什么好处”，“查询_ID”：0，“查询类型”：“描述”，“答案”：[“使用化石燃料最大的好处是它们可以储存简单，方便运输。因此大量的煤炭储备从煤矿被运送到远离煤矿的产业。”]} 字段 定义 查询 问题查询与测试集中的查询相同 查询ID 应该与Test Set中的query_id相同 查询类型 可选的 答案 应该只包含一个由您的算法输出的最佳答案 B：对于初始阶段和最终阶段，每个团队还应该提交一个包含CNTK代码和模型的文件夹，以便重现测试结果。 文件夹的结构应该像这样: 注意： 1.每个团队只提交一个测试文件（output.json）和相应的源代码和模型。 2.委员会可以运行提交的CNTK代码，以确保提交的测试结果的合法性和有效性。 3.委员会将忽略任何不遵守规则的提交。请在提交前用评分脚本检查结果文件。 指标：任务使用ROUGE-L作为排名模型质量的度量，并使用下面的代码来评分和输出ROUGE-L得分。 根据研究论文(http://www.aclweb.org/anthology/W/W04/W04-1013.pdf) ,ROUGE-L是基于最长公共子序列(LCS)的统计量.ROUGE-L首先找出最长的共同点 在长度为m的候选通道（X）与长度为n的参考通道（Y）之间的子序列（LCS）。 注意当两条通道相同（X = Y）时，ROUGE-L为1，当LCS（X，Y）= 0时，ROUGE-L为零。 代码评分和输出指标https://msmarco.blob.core.windows.net/msmarco/ms_marco_eval.tar.gz 训练框架 您必须使用CNTK框架(https://github.com/Microsoft/CNTK) 作为解决方案的深度学习部分。使用或依赖于任何其他深度学习框架将会放弃您的提交。 要安装CNTK，请按照(https://docs.microsoft.com/en-us/cognitive-toolkit/setup-windows-python) 中的说明进行操作。您可以简单地用“pip install ‘与之匹配的CNTK python滚轮 你的相应steup。（我认为这里的意思应该是用pip来自动安装合适的版本）。 CNTK 文件：https://cntk.ai/pythondocs/ 掌握基本的笔记教程，推进深入的学习任务：https://github.com/Microsoft/CNTK/tree/master/Tutorials 相关的文本处理教程： 1.语言理解的简单例子：https://github.com/Microsoft/CNTK/blob/master/Tutorials/CNTK_202_Language_Understanding.ipynb 2.序列将一个句子从一种语言转换为另一种语言的例子：https://github.com/Microsoft/CNTK/blob/master/Tutorials/CNTK_204_Sequence_To_Sequence.ipynb 3.用LSTM进行深层结构语义建模：https://github.com/Microsoft/CNTK/blob/master/Tutorials/CNTK_303_Deep_Structured_Semantic_Modeling_with_LSTM_Networks.ipynb 基线代码这里是MS宏数据集的CNTK基线训练代码：https://github.com/Microsoft/CNTK/tree/nikosk/bidaf/Examples/Text/BidirectionalAttentionFlow/msmarco 上面的训练代码是用Python编写的，它包含转换器脚本，它将MSMARCO数据库转换为可由CNTK阅读器使用的CTF CNTK格式（您可以编写自己的Python代码来读取数据并将其提供给教练，但速度会更慢 ），以及端到端的培训脚本。 硬件要求 强烈建议在GPU平台上运行训练代码。 有任何相关的问题，请联系techsupport@asc-events.org 更新于2018年 01月 20日 星期六 19:24:04 CST","categories":[{"name":"技术比赛","slug":"技术比赛","permalink":"https://tannisi.github.io/categories/技术比赛/"}],"tags":[{"name":"asc18","slug":"asc18","permalink":"https://tannisi.github.io/tags/asc18/"}]},{"title":"操作系统结构简述","slug":"操作系统结构简述","date":"2018-01-14T10:56:04.000Z","updated":"2018-01-25T13:23:12.625Z","comments":true,"path":"2018/01/14/操作系统结构简述/","link":"","permalink":"https://tannisi.github.io/2018/01/14/操作系统结构简述/","excerpt":"1.单体操作系统 在大多数常见的组织中，整个操作系统在内核态以单一程序的方式运行。整个操作系统一过程集合的方式编写，链接成一个大型可执行二进制程序。 使用这种技术，系统中每个过程可以自由调用其他过程，只要后者提供了前者所需要的一些有用的计算工作。调用任何一个你所需要的过程，或许会非常高效，但上千个可以不受限制地彼此调用的过程常常会导致系统笨拙且难于理解。并且任何一个系统的崩溃都会连累整个系统。","text":"1.单体操作系统 在大多数常见的组织中，整个操作系统在内核态以单一程序的方式运行。整个操作系统一过程集合的方式编写，链接成一个大型可执行二进制程序。 使用这种技术，系统中每个过程可以自由调用其他过程，只要后者提供了前者所需要的一些有用的计算工作。调用任何一个你所需要的过程，或许会非常高效，但上千个可以不受限制地彼此调用的过程常常会导致系统笨拙且难于理解。并且任何一个系统的崩溃都会连累整个系统。 （这里我认为是由于各个过程以集合的方式组织在一起的结构所导致的即集合的性质，不知理解的是否正确！） 在使用这种处理方式构造实际的目标程序时，首先编译所有单个的过程（或者编译包含过程的文件），然后通过系统链接接程序将它们链接成单一的目标文件。 可是即使在单体结构中，也有一些结构存在。可以将参数设置在良好定义的位置（如栈），通过这种方式，向操作系统请求所能提供的服务（系统调用），然后执行一个陷阱指令（将机器从用户态切换到内核态所进行的指令，陷阱指内陷到操作系统内核中）。 对于这类操作系统的基本结构，有着如下结构上的建议： 1.需要一个主程序用来处理服务过程请求。 2.需要一套服务过程，用来执行系统调用。 3.需要一套实用过程，用来辅助服务过程。（如用户程序取数据等） 除了在系统初启时所装载的核心操作系统，许多操作系统支持可装载的扩展，例如：I/O设备驱动和文件系统。在UNIX中他们被叫做共享库（shared library），在Windows中则被称作动态链接库（DLL），他们的扩展类型为.dll，在C:\\Windows\\system32目录下存在1000多个DLL文件。 2.层次式系统 它的上层软件都是在在下一层软件的基础之上构建的。THE系统（1968）是按此模型构造的第一个操作系统。他是一个简单的批处理操作系统。该系统共分为六层，如下图所示: 层号 功能 5 操作员 4 用户程序 3 输入/输出管理 2 操作员——进程通信 1 存储器和磁鼓管理 0 处理器分配和多道程序设计 THE操作系统的结构第0层：处理器分配在第0层中进行，当中断发生或定时器到期时，由该层进行进程切换。在第0层之上，系统由一些连续的进程所组成，编写这些进程时不再考虑在单处理器上多进程进行的细节。也就是说，在第0层中提供了基本的CPU多道程序设计功能。第1层：内存管理在第1层中进行，它分配进程的主存空间，当内存用完时，则在一个512k字的磁鼓上保留进程的一部分（页面）（我认为这种方法跟交换空间（swap）是差不多的）。在第一层上，进程不用考虑它是在磁鼓上还是在内存中运行。第一层的软件保证一旦需要访问某一页面，该页面必定已在内存中，并在页面不再需要时将其移出。第2层：处理进程与操作员控制台（即用户）之间的通信。在这层的上部，可以认为每个进程都有自己的操作员控制台第3层：管理I/O设备和相关的信息流缓冲区。在第三层上每个进程都与有良好特性的抽象I/O设备打交道，而不必考虑外部设备的物理细节。第4层：用户程序层。用户程序不需要考虑进程、内存、控制台或I/O设备管理等细节。第5层：系统操作员进程。 下面介绍一下MULTICS系统 在MULTICS系统中采用了更进一步的通用层次化概念。MULTICS由许多的通信换构造而成，而不是采用层次化构造，内环比外环有更高的级别（他们实际上是一样的）。当外环的过程欲调用内环的过程时，他必须执行一条等价于系统调用的TRAP指令。在执行该TRAP指令之前，要进行严格的参数合法性检查。在MULTICS中，尽管整个操作系统是各个用户进程的地址空间的一部分，但是应尽仍能对单个过程（实际上是内存中的一个段）的读、写和执行进行保护。比较THE系统和MULTICS系统的不同：THE分层方案只是为设计提供了一些方便，因为该系统的各个部分最终仍然被链接成了完整的单个目标程序。（这里我认为它跟上面的单体系统有些相似）MULTICS系统的环形机制在运行中是实际存在的，而且是由硬件实现的。环形机制的一个优点是很容易扩展，可用以构造用户子系统。举例说明：在一个MULTICS系统中，教授可以写一个程序检查学生编写的程序并给他们打分，在第n个环中运行教授的程序，而在第n+1个环中运行学生的程序，这样学生就无法篡改教授所给出的成绩了。（我认为这主要是靠系统在执行TRAP指令前，要进行严格的参数合法性检查这一行为所实现的。） 3.微内核 在分层设计中，设计者要确定在哪里划分内核-用户的边界。传统上，所有的层都在内核中，但是尽可能减少内核态中功能的做法更好，因为内核中的错误会快速的拖累系统。相反，可把用户进程设置为具有较小的权限，这样某个错误的后果就不会是致命的。（代码错误的密度䚧模块大小、模块寿命等，不过对一个实际的工业系统而言，每千行代码中会有2~10个错误，这意味着在有500万行代码的单体操作系统中，大约有10000~50000个内核错误，但并不是所有的错误都是致命的。） 在微内核设计背后的思想是，为了实现高可靠性，将操作系统划分成小的、良好定义的模块，只有其中一个模块——微内核——运行在内核态，其余的模块由于功能相对弱些，则作为普通用户进程运行。特别地，由于把每个设备驱动和文件系统分别作为普通用户进程，这些模块中的错误虽然会使这些模块崩溃，但是不会使得整个操作系统死机。 但是在单体操作系统中，由于所有的设备驱动都在内核中，一个有故障的音频驱动很容易引起对无效地址的引用，从而造成系统停机。 除了比较著名的基于Mach微内核OS X外，通常的桌面操作系统并不使用微内核。但是微内核在工业中却特别流行，因为微内核具有高度的可靠性。 这里对MINIX3做一简单的介绍，该操作系统把模块化的思想推到了极致，它将大部分操作系统分解成许多独立的用户态进程，其最受POSIX标准。MINIX3微内核只有12000行代码和1400行用于非常低层次功能的汇编代码，诸如捕获中断、进程切换等，C代码管理和调度进程、处理进程间通信（在进程间传送消息）、提供大约40个内核调用，他们似的操作系统的其余部分可以完成其工作。这些调用完成诸如连接中断句柄、在地址空间中移动数据以及为新创建的进程安装新的内存映像等功能。MINIX的进程结构如下图所示：其中内核调用句柄用Sys标记，始终设备驱动也在内核中，因为这个驱动与调度器交互密切。所有的其他设备驱动都作为单独的用户进程运行。在内核的外部，系统的构造有三层进程，他们都在用户态运行。（1）最底层中包含设备驱动器。由于他们在用户态运行，所以不能物理的访问I/O端口空间，也不能直接的发出I/O命令。相反，为了能够对I/O设备编程，驱动器建了一个结构，指明哪个参数值写到哪个I/O端口，并生成一个内核调用，并通知内核完成写操作。（2）在驱动器上面是另一用户层，包含有服务器，它们完成操作系统的多数工作。由一个或多个文件服务器管理着文件系统，进程管理器创建、销毁和管理进程等。通过给服务器发送短消息请求POSIX系统调用的方式，用户程序获得操作系统的服务。（3）有一个有趣的服务器，称为“再生服务器”，其任务是检查其他服务器和驱动器的功能是否正确。一旦检查出了错误，它自动取代之，无需用户的干预。这种方式使得系统具有自我修复的能力，并且获得了较高的可靠性。（4）系统对每个进程的权限有着许多的限制。所有这些权限是让每个驱动和服务器只拥有完成其工作所需要的权限，这样就极大地限制了故障部件可能造成的危害。（5）一个于小内核相关联的思想是内核中的“机制与策略分离的原则”。为了说明这一点，我们考虑进程调度。一个比较简单的调度算法是：对每个进程赋予一个优先级，并让内核执行具有最高优先级的内容。这里，机制（在内核中）就是寻找最高优先级的进程并运行之。而策略（赋予进程优先级）可以有用户态中的进程完成。在这种方式中，机制和策略是分离的，从而使系统内核变得更小。 4. 客户端-服务器模式 一个微内核思想的略微变体是将进程划分为两类：服务器（每个服务器提供某种服务），客户端（使用这些服务）。这种模式就是客户端——服务器模式。通常在系统最底层的是微内核，但并不是必须这样。这个模式的本质是存在客户端进程和服务器进程。 一般来说服务器客户端之间的通信是“消息传递”。为了获得一个服务，客户端进程构造一段消息，说明所需要的服务，并将其发给合适的服务器。该服务器完成工作，发送回应。 这种思想的一个显然的普遍方式是，客户端和服务器运行在不同的计算机上，它们通过局域网或广域网连接，其结构如下图所示：由于客户端通过发送消息与服务器通信，客户端并不需要知道这些消息是在本地计算机上处理，还是通过网络被送到远程计算机上处理。对于客户端而言，这两种情形都是一样的：都是发送请求并得到回应。所以服务器客户端模式是一种可以应用在单机或网络机器上的抽象。（许多web就是以这个方式运行的） 5.虚拟机1.VM/370 这个系统最初被命名为CP/CMS，后来改名为VM/370.他是源于如下机敏的观察，即分时系统应该提供这些功能：（1）多道程序（2）一个比裸机更方便，有扩展界面的计算机。而VM/370存在的目的是将两者彻底地隔离开来。 这个系统的核心称为“虚拟机监控程序”，他在逻辑上运行并具备了多道程序功能。该系统向上层提供了若干台虚拟机。这些虚拟机并不那种具有文件等优良特征的扩展计算机。他们仅仅是裸机硬件的精确复制品。这个复制品包括了内核态/用户态、I/O功能、中断及其它真实硬件所应该具有的全部内容。 在早期的VM/370系统上，有一些系统运行OS/360或者其他大型批处理或事务处理操作系统，而另一些虚拟机运行单用户、交互式系统供分时用户使用，这个系统称为“会话监控系统（CMS）”，后者在程序员之间非常流行。 当一个CMS程序执行系统调用时，该调用被陷入到其虚拟机上的操作系统上，而不是VM370上，似乎它运行在实际的机器上，而不是在虚拟机上。CMS然后发出普通的硬件I/O指令读出虚拟磁盘或其他需要执行的调用。这些I/O指令由VM/370陷入，然后作为对实际硬件模拟的一部分，VM/370完成指令。通过对多道程序功能和提供扩展机器二者的完全分离，每个部分变得非常简单、非常灵活且容易维护。 虚拟机的现代化身z/VM通常用于运行多个完整的操作系统，而不是简化成如CMS一样的单用户操作系统。 2.虚拟机的再次发现 首先看需求，传统上，许多公司在不同的计算机上，有时还在不同的操作系统上，运行其邮件服务器、web服务器、FTP服务器以及其他服务器。他们看到可以在同一台机器上实现虚拟化来运行所有的服务器，而不会由于一个服务器崩溃而影响其他系统。虚拟化在web托管世界也很流行。没有虚拟化，Web托管客户端只能共享托管以及独占托管。 虚拟化的另一个用途是，为希望同时运行两个或多个操作系统的最终用户服务，某个偏好的应用程序可运行在一个操作系统上，而其他的应用程序可运行在另一个操作系统上。如下图所示：在这里术语“虚拟机监控程序”已经被重新命名为第一类虚拟机管理程序，在虚拟机的实现上存在问题，为了在一台计算机上运行虚拟机软件，其CPU必须被虚拟化，简言之，存在一个问题，当运行虚拟机（在用户态）的操作系统执行某个特权指令时，比如修改PSW或进行I/O操作，硬件实际上陷入到了虚拟机中，这样有关指令就可以在软件中模拟。在某些CPU上（特别是Pentium和它的后继者及其克隆版中）试图在用户态执行特权指令是，会被忽略掉。这种特性使得在这类硬件中无法实现虚拟机，这也解释了PC界对虚拟机不感兴趣的原因。 一些早期研究项目通过即时翻译大块代码、将其存储到内部高速缓存并在其再次执行时复用的方式提高了Bochs等翻译器的性能，也推动了模拟器的出现，如上图b）所示，该技术被称为“二进制翻译”。改善性能的下一步在于添加分担重担的内核模块，如上图c）所示，事实上，现在所有商用可用的虚拟机管理程序都是用这种混合策略，如VWware工作站。他们被称为第二类虚拟机管理程序. 实际上，第一类虚拟机和第二类虚拟机管理程序的真正区别在于，后者利用宿主操作系统并通过其文件系统创建进程、存储文件等。第一类虚拟机管理程序没有底层支持，所以必须自行实现所有功能。 当第二类虚拟机管理程序启动时，它从CD-ROM安装盘中读入供选择的客户操作系统，并安装在一个虚拟盘上该盘实际上是宿主操作系统的文件系统上的一个大文件。由于没有可以存储文件的操作系统，因此第一类虚拟机管理程序不能采用这种方式。 处理控制指令的一种不同的方式是，修改操作系统，然后删掉他们。这种方式是半虚拟化。 3.Java虚拟机 另一个使用虚拟机的领域，是为了运行Java程序(例如Android就是在Linux内核上使用Java解释器来运行Java程序)，但方式有些不同，在Sun公司发明Java程序设计语言时，也发明了称为JVM的虚拟机（一种体系结构）。Java编译器为JVM生成代码，这些代码以后可以由一个软件JVM解释器执行。这种处理方式的优点在于，JVM代码可以通过Internet传送到任何有JVM解释器的计算机上，并在该机器上执行。使用JVM的另一种优点是，如果解释器正确的完成并不意味着就结束了还要对输入的JVM进行安全性检查，然后在一种保护环境下执行，这样，这些数据就不能偷窃数据或进行其他任何有害的操作。 6.外核 与虚拟机克隆真是极其不同，另一种策略是对机器进行分区。在底层中，一种称为“外核”的程序在内核态中运行。它的任务是为虚拟机分配资源，并检查用这些资源的企图，已确保没有机器会使用他人的资源。每个用户层的虚拟机都可以运行自己的操作系统，但限制只能使用已经申请并获得分配的哪部分资源。 外核机制的优点是（1）减少了映像层，不需要重映像磁盘地址的处理了（2）将多道程序（在外核内）与用户操作系统代码（在用户空间内）加以分离，而且负载并不重，这是因为外核所做的只是保持多个虚拟机彼此不发生冲突。","categories":[{"name":"现代操作系统学习","slug":"现代操作系统学习","permalink":"https://tannisi.github.io/categories/现代操作系统学习/"}],"tags":[{"name":"操作系统结构","slug":"操作系统结构","permalink":"https://tannisi.github.io/tags/操作系统结构/"}]},{"title":"利用hexo+github建立个人技术博客","slug":"利用hexo-github建立个人技术博客","date":"2018-01-12T13:31:15.000Z","updated":"2018-01-18T02:46:12.773Z","comments":true,"path":"2018/01/12/利用hexo-github建立个人技术博客/","link":"","permalink":"https://tannisi.github.io/2018/01/12/利用hexo-github建立个人技术博客/","excerpt":"","text":"1.创建github账号","categories":[{"name":"搭建blog","slug":"搭建blog","permalink":"https://tannisi.github.io/categories/搭建blog/"}],"tags":[{"name":"hexo+github","slug":"hexo-github","permalink":"https://tannisi.github.io/tags/hexo-github/"}]},{"title":"github+hexo搭建个人技术博客遇到的问题以及解决方案","slug":"github-hexo搭建个人技术博客遇到的问题以及解决方案","date":"2018-01-12T07:24:54.000Z","updated":"2018-01-25T08:24:18.938Z","comments":true,"path":"2018/01/12/github-hexo搭建个人技术博客遇到的问题以及解决方案/","link":"","permalink":"https://tannisi.github.io/2018/01/12/github-hexo搭建个人技术博客遇到的问题以及解决方案/","excerpt":"hexo删除博客中已有的文章 删除仓库里面 source/_posts/我的文章.md 执行下列命令更新博客： hexo clean #清除缓存 hexo g == hexo generate#生成（hexo s == hexo server#启动服务预览，其实不用执行这一步，这一步只是用来看修改后的后果，作用类似于打印预览） hexo d == hexo deploy#部署","text":"hexo删除博客中已有的文章 删除仓库里面 source/_posts/我的文章.md 执行下列命令更新博客： hexo clean #清除缓存 hexo g == hexo generate#生成（hexo s == hexo server#启动服务预览，其实不用执行这一步，这一步只是用来看修改后的后果，作用类似于打印预览） hexo d == hexo deploy#部署 关于hexo主题的更改 我们可以去hexo的themes中去找,网址:https://hexo.io/themes/ 从中选一个主题，单击主题的名字 如:next 进入到它在github上的资源，阅读README.md，安装即可。 怎么在Markdown文档中加入下划线或中划线在Markdown中，中划线很简单语法：效果：关于下划线，html和行内CSS就可以解决：（1）方案一：利用u标签快速添加下划线，但是它有两个缺点：1.HTML5规范建议开发者尽量使用其他元素替代u元素。2.u标签的下划线自定义程度低，只有黑色一种颜色（可能是我不知道怎么做吧！）（2）方案二：使用html的span标签、设置行内CSS的border-bottom属性来添加下划线。这种方式自定义程度最高。语法：效果：所添加的需要添加下划线的行内文字","categories":[{"name":"搭建blog","slug":"搭建blog","permalink":"https://tannisi.github.io/categories/搭建blog/"}],"tags":[{"name":"问题解决方案","slug":"问题解决方案","permalink":"https://tannisi.github.io/tags/问题解决方案/"}]}]}